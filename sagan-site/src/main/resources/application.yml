project:
  artifactId: spring-io
  name: spring-io
  description: spring-io

info:
  build:
    artifact: ${project.artifactId}
    name: ${project.name}
    description: ${project.description}
  spring:
    profiles: ${spring.profiles.active:default}
  app:
    name: ${vcap.application.name:sagan}:${vcap.application.instance_index:*}
    start: ${vcap.application.start:N/A}

spring:
  jpa:
    hibernate:
      ddl_auto: none
  security:
    oauth2:
      client:
        registration:
          github:
            # GitHub OAuth application credentials for use when logging into administrative
            # console at /admin. Default 'id' and 'secret' values apply only when running
            # locally, i.e. at http://localhost:8080. Production values must be overridden
            # using SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENTID and
            # SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENTSECRET, respectively.
            client-id: fb06c006c2ed62fe9e8b
            client-secret: 164264e3f6d70c7c21713b7fa64225cb8d6107b2
            # Request the 'read: org' OAuth scope, so that we can check whether the
            # authenticated user belongs to the configured `sagan.site.github.team` for
            # admin access.
            scope:
             - 'read:org'

management:
  endpoint:
    health:
      probes:
        enabled: true

sagan:
  site:
    github:
      # Credentials are based on users belonging to a particular GitHub team,
      # by requesting the GitHub API (see github.client configuration keys).
      # This key can be found in the list of teams in your organization
      # See http://developer.github.com/v3/orgs/teams/#list-teams
      team: spring-team
      # This optional property may be assigned using a "personal access token" created
      # at https://github.com/settings/applications. It is used for accessing GitHub's
      # API, even for operations that do not require authorization (e.g. Getting Started
      # Guide repositories). This is done in order to work against higher rate limits
      # (5000req/hour vs. the default 60req/hour without a token). When running the app
      # locally, this lower default is fine. When running the app in production, the
      # token is a must. See http://developer.github.com/v3/#rate-limiting.
      access-token:
      org: spring-io
---

spring:
  profiles: staging,production
server:
  compression:
    enabled: true
    mime-types: application/javascript,text/css,application/json
  forward-headers-strategy: native

---

spring:
  profiles: standalone
  datasource:
    url: jdbc:h2:mem:sagan;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE
  flyway:
    locations: classpath:/db/migration, classpath:/db/dev
  resources:
    static_locations:
      - file:/Users/bclozel/workspace/sagan/sagan-client/build/dist/
      - file:build/asciidoc/
  devtools:
    restart:
      additional_paths:
        - ../sagan-client/build/dist/
      additional_exclude: "css/**,fonts/**,images/**,js/**,icon*.png,manifest.json,robots.txt"
disqus_shortname: ${DISQUS_SHORTNAME:spring-io-localhost}
---

spring:
  profiles: staging
disqus_shortname: ${DISQUS_SHORTNAME:spring-io-staging}
sagan:
  site:
    renderer:
      service-url: https://sagan-renderer-staging.cfapps.io
---

spring:
  profiles: production
  datasource:
    tomcat:
      max-active: 8
      test-on-borrow: true
disqus_shortname: ${DISQUS_SHORTNAME:spring-io}
sagan:
  site:
    renderer:
      service-url: https://sagan-renderer.cfapps.io